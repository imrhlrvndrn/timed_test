// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  id          BigInt    @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  title       String
  description String?
  testSets    testset[]
}

model testset {
  id          BigInt     @id @default(autoincrement())
  title       String
  isPublished Boolean    @default(false)
  testId      BigInt
  isActive    Boolean    @default(true)
  duration    Int        @default(5) // can be 5, 10, 15, 20
  test        test       @relation(fields: [testId], references: [id])
  questions   question[]
}

model question {
  id          BigInt   @id @default(autoincrement())
  testset     testset? @relation(fields: [testsetId], references: [id])
  testsetId   BigInt?
  title       String
  description String?
  options     option[]
  solution    String // store the id of the option
}

model option {
  id         BigInt    @id @default(autoincrement())
  question   question? @relation(fields: [questionId], references: [id])
  questionId BigInt?
  content    String
}

// model result {
//   id        String   @id @default(cuid())
//   score     Int
//   userId    String
//   testSet   testset  @relation(fields: [testSetId], references: [id])
//   test      test     @relation(fields: [testId], references: [id])
//   user      user     @relation(fields: [userId], references: [id])
//   createdAt DateTime @default(now())
//   testId    String
//   testSetId String
// }

// model user {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      account[]
//   sessions      session[]
//   tests         test[]
//   results       result[]
// }

// model account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user user @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model verificationtoken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
